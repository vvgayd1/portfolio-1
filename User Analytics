User analytics - active vs inactive users

import pandas as pd

# Load dataset with the correct delimiter
df = pd.read_csv("useranalytics.csv", delimiter='|')

# Strip whitespace from column names
df.columns = df.columns.str.strip()

# Convert 'LoginTime' to datetime
df['LastLoginDate'] = pd.to_datetime(df['LastLoginDate'])

# Calculate total logins for each user
user_logins = df.groupby('UserID')['TotalLogins'].sum().reset_index()
user_logins.columns = ['UserID', 'TotalLogins']

# Calculate the average time spent per session for each user
user_time_spent = df.groupby('UserID')['TimeSpent (mins)'].mean().reset_index()
user_time_spent.columns = ['UserID', 'AvgTimeSpent']

# Calculate the number of different features used by each user
user_features_used = df.groupby('UserID')['FeatureUsedCount'].sum().reset_index()
user_features_used.columns = ['UserID', 'FeatureUsedCount']

# Calculate the number of days since the user's last login
current_date = pd.to_datetime("2025-01-07")
user_inactive_period = df.groupby('UserID')['LastLoginDate'].max().reset_index()
user_inactive_period['InactivePeriodDays'] = (current_date - user_inactive_period['LastLoginDate']).dt.days
user_inactive_period = user_inactive_period[['UserID', 'InactivePeriodDays']]

# Assuming 'EngagementScore' is already present in the DataFrame
user_engagement_score = df.groupby('UserID')['EngagementScore'].mean().reset_index()
user_engagement_score.columns = ['UserID', 'EngagementScore']

# Merge all features into a single DataFrame
user_features = pd.merge(user_logins, user_time_spent, on='UserID')
user_features = pd.merge(user_features, user_features_used, on='UserID')
user_features = pd.merge(user_features, user_inactive_period, on='UserID')
user_features = pd.merge(user_features, user_engagement_score, on='UserID')

print(user_features.head())

next steps:

Define Activity Metrics: Create additional features if necessary to capture user activity.

Clustering to Identify Patterns: Use clustering techniques to group users into active and inactive categories.

Visualization: Visualize the clusters to understand the patterns better.

Analysis: Analyze the characteristics of each cluster to understand the differences between active and inactive users.

# step 1 - define activity metrics

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Features for clustering
features_for_clustering = user_features[['TotalLogins', 'AvgTimeSpent', 'FeatureUsedCount', 'InactivePeriodDays', 'EngagementScore']]

# Use KMeans clustering to identify patterns
kmeans = KMeans(n_clusters=2, random_state=42)  # Adjust number of clusters as needed
user_features['Cluster'] = kmeans.fit_predict(features_for_clustering)

# Visualize the clusters
sns.scatterplot(x='TotalLogins', y='AvgTimeSpent', hue='Cluster', data=user_features, palette='Set1')
plt.title("User Clustering: Active vs Inactive")
plt.xlabel("Total Logins")
plt.ylabel("Average Time Spent (mins)")
plt.show()

# You can visualize other combinations of features similarly

# Visualize clusters with different feature combinations
sns.pairplot(user_features, hue='Cluster', vars=['TotalLogins', 'AvgTimeSpent', 'FeatureUsedCount', 'InactivePeriodDays', 'EngagementScore'], palette='Set1')
plt.suptitle("User Clustering: Active vs Inactive", y=1.02)
plt.show()

# Analyze the characteristics of each cluster
active_users = user_features[user_features['Cluster'] == 0]
inactive_users = user_features[user_features['Cluster'] == 1]

print("Active Users:")
print(active_users.describe())

print("\nInactive Users:")
print(inactive_users.describe())

# Depending on the clustering results, you may want to swap the cluster labels
# For example, if Cluster 1 represents active users and Cluster 0 represents inactive users, you can rename them
